import { App, TFile } from "obsidian";

export class TerraformParser {
	app: App;
	settings: any;

	constructor(app: App, settings: any) {
		this.app = app;
		this.settings = settings;
	}

	async parseFile(file: TFile): Promise<string> {
		const content = await this.app.vault.read(file);

		let markdown = `# üåç Terraform Configuration Overview\n\n`;
		markdown += `**File:** \`${file.path}\`\n\n`;
		markdown += `This document provides a structured summary of the Terraform configuration found in this file. Each section below explains what the block represents, its purpose, and shows its raw configuration.\n\n`;

		const blockRegex =
			/(resource|provider|variable|output|module)\s+"([\w-]+)"(?:\s+"([\w-]+)")?\s*{([\s\S]*?)}/g;

		let match;
		let found = false;

		while ((match = blockRegex.exec(content)) !== null) {
			found = true;
			const [_, type, name, subname, body] = match;
			const blockType = type.toLowerCase();

			markdown += `## üß± ${blockType.charAt(0).toUpperCase() + blockType.slice(1)}: \`${name}${subname ? ` - ${subname}` : ""}\`\n`;

			// üîç Description p√©dagogique du bloc
			switch (blockType) {
				case "provider":
					markdown += `Providers define **which cloud platform or service** Terraform interacts with (e.g., AWS, Azure, Google Cloud). They are responsible for creating and managing infrastructure resources.\n\n`;
					break;
				case "resource":
					markdown += `Resources represent **infrastructure components** Terraform will create or manage ‚Äî such as virtual machines, networks, storage buckets, etc.\n\n`;
					break;
				case "variable":
					markdown += `Variables allow **dynamic configuration** of Terraform modules and resources. They make the code reusable and configurable for different environments.\n\n`;
					break;
				case "output":
					markdown += `Outputs define **information Terraform should display or export** after applying the configuration ‚Äî such as IP addresses, IDs, or URLs.\n\n`;
					break;
				case "module":
					markdown += `Modules are **reusable units of Terraform configuration** that can be shared across projects or teams. They promote consistency and reduce duplication.\n\n`;
					break;
			}

			// üîß Code brut du bloc
			markdown += `**Raw Configuration:**\n`;
			markdown += "```hcl\n" + body.trim() + "\n```\n\n";
		}

		if (!found) {
			markdown += "‚ö†Ô∏è No recognized Terraform blocks (`resource`, `provider`, `variable`, `output`, `module`) were found in this file.\n";
		}

		markdown += `---\nüìù *This documentation was automatically generated by DevOps Companion.*\n`;

		return markdown;
	}
}
